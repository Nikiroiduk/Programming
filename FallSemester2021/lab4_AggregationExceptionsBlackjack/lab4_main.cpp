#include "GameController.h"
#include "IFormattable.h"
#include "DeckClassAdapter.h"
#include "DeckObjectAdapter.h"

using std::string;
using std::cout;
using std::to_string;

void Exercise1() {
	auto gc = GameController();
}

void prettyPrint(const IFormattable& object) {
	
}

void Exercise2() {
	auto* adaptC = new DeckClassAdapter();
	cout << adaptC->format();

	auto* adaptO = new DeckObjectAdapter();
	cout << adaptO->format();

	//IFormattable* dca = dynamic_cast<DeckClassAdapter*>(adaptC);
	//prettyPrint(*dca);

	//IFormattable* doa = dynamic_cast<DeckObjectAdapter*>(adaptO);
	//prettyPrint(*doa);

	delete adaptC;
	delete adaptO;
}

int main() {
	/*
	Написать простой консольный вариант карточной игры BlackJack для игры один - на один
	с дилером, в соответствии с вариантом.В приложении А приведены вариации и особенности
	правил игры для каждого варианта.В ходе работы необходимо сделать как минимум следующее :
	- создать и связать отношением агрегации / композиции и / или наследования классы
	  КАРТА, КОЛОДА, ДИЛЕР, ИГРОК, ИГРА.В целом, Вы можете предлагать здесь
	  свои варианты объектно - ориентированного проектирования;
	- в начале игры генерировать случайным образом 4 колоды с 36 или 52 картами, в
	  зависимости от варианта;
	- имитировать действия дилера, в соответствии с вариантом игры;
	- запрограммировать обработку всех потенциально возможных вариантов исхода :
	  блек - джек, перебор, ровно, выигрыш по очкам, проигрыш по очкам;
	- бросать и отлавливать исключение при «переборе»(«перебор» рассматривать как
	  исключительную ситуацию);
	- перегрузить операцию потокового вывода объекта класса карты на экран с
	  помощью дружественной функции.Выводить карту в виде 2♠, Q♦ и т.д. (символы
	  карточных мастей имеют ASCII - коды 3, 4, 5, 6 и UNICODE - коды "\u2665",
	  "\u2666", "\u2663", "\u2660", соответственно)

	Вариант игры: 17+4
	Тип игры:	  Базовый
	Доп. правила: Сплит
	*/
	Exercise1();

	/*
	Реализуйте паттерн GOF «Адаптер» в обоих видах (адаптер класса и адаптер объекта) 
	на следующем примере. Напишите интерфейс IFormattable с методом std::string
	format() для форматирования объекта, реализующего данный интерфейс, а также
	функцию void prettyPrint(const IFormattable& object), которая выводит на 
	экран объект-параметр в отформатированном виде. Сделайте так, чтобы в эту 
	функцию можно было передавать ссылку на Вашу колоду карт, разработанную в 
	задании 1. Алгоритм форматирования придумайте произвольный сами.
	*/
	Exercise2();

	return 0;
}